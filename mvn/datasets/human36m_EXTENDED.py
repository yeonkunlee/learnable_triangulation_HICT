import os
from collections import defaultdict
import pickle

import numpy as np
import cv2

import torch
from torch.utils.data import Dataset

from mvn.utils.multiview import Camera
from mvn.utils.img import get_square_bbox, resize_image, crop_image, normalize_image, scale_bbox
from mvn.utils import volumetric

import math
import copy


class Human36MMultiViewDataset_EXTENDED(Dataset):
    """
        Human3.6M for multiview tasks.
    """
    def __init__(self,
                 h36m_root='/Vol1/dbstore/datasets/Human3.6M/processed/',
                 labels_path='/Vol1/dbstore/datasets/Human3.6M/extra/human36m-multiview-labels-SSDbboxes.npy',
                 pred_results_path=None,
                 image_shape=(256, 256),
                 train=False,
                 test=False,
                 retain_every_n_frames_in_test=1,
                 with_damaged_actions=False,
                 cuboid_side=2000.0,
                 scale_bbox=1.5,
                 norm_image=True,
                 kind="mpii",
                 undistort_images=False,
                 ignore_cameras=[],
                 crop=True,
                 option_384x288 = False,
                 ):
        """
            h36m_root:
                Path to 'processed/' directory in Human3.6M
            labels_path:
                Path to 'human36m-multiview-labels.npy' generated by 'generate-labels-npy-multiview.py'
                from https://github.sec.samsung.net/RRU8-VIOLET/human36m-preprocessing
            retain_every_n_frames_in_test:
                By default, there are 159 181 frames in training set and 26 634 in test (val) set.
                With this parameter, test set frames will be evenly skipped frames so that the
                test set size is `26634 // retain_every_n_frames_test`.
                Use a value of 13 to get 2049 frames in test set.
            with_damaged_actions:
                If `True`, will include 'S9/[Greeting-2,SittingDown-2,Waiting-1]' in test set.
            kind:
                Keypoint format, 'mpii' or 'human36m'
            ignore_cameras:
                A list with indices of cameras to exclude (0 to 3 inclusive)
        """
        assert train or test, '`Human36MMultiViewDataset` must be constructed with at least ' \
                              'one of `test=True` / `train=True`'
        assert kind in ("mpii", "human36m")

        self.h36m_root = h36m_root
        self.labels_path = labels_path
        self.image_shape = None if image_shape is None else tuple(image_shape)
        self.scale_bbox = scale_bbox
        self.norm_image = norm_image
        self.cuboid_side = cuboid_side
        self.kind = kind
        self.undistort_images = undistort_images
        self.ignore_cameras = ignore_cameras
        self.crop = crop
        self.option_384x288 = option_384x288

        self.labels = np.load(labels_path, allow_pickle=True).item()

        n_cameras = len(self.labels['camera_names'])
        assert all(camera_idx in range(n_cameras) for camera_idx in self.ignore_cameras)

        train_subjects = ['S1', 'S5', 'S6', 'S7', 'S8']
        test_subjects = ['S9', 'S11']
        
#         train_subjects = []
#         test_subjects = ['S11']

        train_subjects = list(self.labels['subject_names'].index(x) for x in train_subjects)
        test_subjects  = list(self.labels['subject_names'].index(x) for x in test_subjects)

        indices = []
        if train:
            mask = np.isin(self.labels['table']['subject_idx'], train_subjects, assume_unique=True)
            indices.append(np.nonzero(mask)[0])
        if test:
            mask = np.isin(self.labels['table']['subject_idx'], test_subjects, assume_unique=True)

            if not with_damaged_actions:
                mask_S9 = self.labels['table']['subject_idx'] == self.labels['subject_names'].index('S9')

                damaged_actions = 'Greeting-2', 'SittingDown-2', 'Waiting-1'
                damaged_actions = [self.labels['action_names'].index(x) for x in damaged_actions]
                mask_damaged_actions = np.isin(self.labels['table']['action_idx'], damaged_actions)

                mask &= ~(mask_S9 & mask_damaged_actions)

            indices.append(np.nonzero(mask)[0][::retain_every_n_frames_in_test])

        self.labels['table'] = self.labels['table'][np.concatenate(indices)]

        self.num_keypoints = 16 if kind == "mpii" else 17
        self.num_extended_keypoints = 25
        assert self.labels['table']['keypoints'].shape[1] == 17, "Use a newer 'labels' file"
        assert self.labels['table']['keypoints_extended'].shape[1] == 25, "Extended 25 joint label needed."

        self.keypoints_3d_pred = None
        if pred_results_path is not None:
            pred_results = np.load(pred_results_path, allow_pickle=True)
            keypoints_3d_pred = pred_results['keypoints_3d'][np.argsort(pred_results['indexes'])]
            self.keypoints_3d_pred = keypoints_3d_pred[::retain_every_n_frames_in_test]
            assert len(self.keypoints_3d_pred) == len(self), \
                f"[train={train}, test={test}] {labels_path} has {len(self)} samples, but '{pred_results_path}' " + \
                f"has {len(self.keypoints_3d_pred)}. Did you follow all preprocessing instructions carefully?"
        
        
        self.h36m_all_mapper = defaultdict(None,
                        {'S1': defaultdict(None,
                                     {'Directions-1': 's_01_act_02_subact_01',
                                      'Directions-2': 's_01_act_02_subact_02',
                                      'Discussion-1': 's_01_act_03_subact_01',
                                      'Discussion-2': 's_01_act_03_subact_02',
                                      'Eating-1': 's_01_act_04_subact_01',
                                      'Eating-2': 's_01_act_04_subact_02',
                                      'Greeting-1': 's_01_act_05_subact_01',
                                      'Greeting-2': 's_01_act_05_subact_02',
                                      'Phoning-1': 's_01_act_06_subact_01',
                                      'Phoning-2': 's_01_act_06_subact_02',
                                      'Posing-1': 's_01_act_07_subact_01',
                                      'Posing-2': 's_01_act_07_subact_02',
                                      'Purchases-1': 's_01_act_08_subact_01',
                                      'Purchases-2': 's_01_act_08_subact_02',
                                      'Sitting-1': 's_01_act_09_subact_01',
                                      'Sitting-2': 's_01_act_09_subact_02',
                                      'SittingDown-1': 's_01_act_10_subact_01',
                                      'SittingDown-2': 's_01_act_10_subact_02',
                                      'Smoking-1': 's_01_act_11_subact_01',
                                      'Smoking-2': 's_01_act_11_subact_02',
                                      'TakingPhoto-1': 's_01_act_12_subact_01',
                                      'TakingPhoto-2': 's_01_act_12_subact_02',
                                      'Waiting-1': 's_01_act_13_subact_01',
                                      'Waiting-2': 's_01_act_13_subact_02',
                                      'Walking-1': 's_01_act_14_subact_01',
                                      'Walking-2': 's_01_act_14_subact_02',
                                      'WalkingDog-1': 's_01_act_15_subact_01',
                                      'WalkingDog-2': 's_01_act_15_subact_02',
                                      'WalkingTogether-1': 's_01_act_16_subact_01',
                                      'WalkingTogether-2': 's_01_act_16_subact_02'}),
                         'S5': defaultdict(None,
                                     {'Directions-1': 's_05_act_02_subact_01',
                                      'Directions-2': 's_05_act_02_subact_02',
                                      'Discussion-1': 's_05_act_03_subact_01',
                                      'Discussion-2': 's_05_act_03_subact_02',
                                      'Eating-1': 's_05_act_04_subact_01',
                                      'Eating-2': 's_05_act_04_subact_02',
                                      'Greeting-1': 's_05_act_05_subact_01',
                                      'Greeting-2': 's_05_act_05_subact_02',
                                      'Phoning-1': 's_05_act_06_subact_01',
                                      'Phoning-2': 's_05_act_06_subact_02',
                                      'Posing-1': 's_05_act_07_subact_01',
                                      'Posing-2': 's_05_act_07_subact_02',
                                      'Purchases-1': 's_05_act_08_subact_01',
                                      'Purchases-2': 's_05_act_08_subact_02',
                                      'Sitting-1': 's_05_act_09_subact_01',
                                      'Sitting-2': 's_05_act_09_subact_02',
                                      'SittingDown-1': 's_05_act_10_subact_01',
                                      'SittingDown-2': 's_05_act_10_subact_02',
                                      'Smoking-1': 's_05_act_11_subact_01',
                                      'Smoking-2': 's_05_act_11_subact_02',
                                      'TakingPhoto-1': 's_05_act_12_subact_01',
                                      'TakingPhoto-2': 's_05_act_12_subact_02',
                                      'Waiting-1': 's_05_act_13_subact_01',
                                      'Waiting-2': 's_05_act_13_subact_02',
                                      'Walking-1': 's_05_act_14_subact_01',
                                      'Walking-2': 's_05_act_14_subact_02',
                                      'WalkingDog-1': 's_05_act_15_subact_01',
                                      'WalkingDog-2': 's_05_act_15_subact_02',
                                      'WalkingTogether-1': 's_05_act_16_subact_01',
                                      'WalkingTogether-2': 's_05_act_16_subact_02'}),
                         'S6': defaultdict(None,
                                     {'Directions-1': 's_06_act_02_subact_01',
                                      'Directions-2': 's_06_act_02_subact_02',
                                      'Discussion-1': 's_06_act_03_subact_01',
                                      'Discussion-2': 's_06_act_03_subact_02',
                                      'Eating-1': 's_06_act_04_subact_01',
                                      'Eating-2': 's_06_act_04_subact_02',
                                      'Greeting-1': 's_06_act_05_subact_01',
                                      'Greeting-2': 's_06_act_05_subact_02',
                                      'Phoning-1': 's_06_act_06_subact_01',
                                      'Phoning-2': 's_06_act_06_subact_02',
                                      'Posing-1': 's_06_act_07_subact_01',
                                      'Posing-2': 's_06_act_07_subact_02',
                                      'Purchases-1': 's_06_act_08_subact_01',
                                      'Purchases-2': 's_06_act_08_subact_02',
                                      'Sitting-1': 's_06_act_09_subact_01',
                                      'Sitting-2': 's_06_act_09_subact_02',
                                      'SittingDown-1': 's_06_act_10_subact_01',
                                      'SittingDown-2': 's_06_act_10_subact_02',
                                      'Smoking-1': 's_06_act_11_subact_01',
                                      'Smoking-2': 's_06_act_11_subact_02',
                                      'TakingPhoto-1': 's_06_act_12_subact_01',
                                      'TakingPhoto-2': 's_06_act_12_subact_02',
                                      'Waiting-1': 's_06_act_13_subact_01',
                                      'Waiting-2': 's_06_act_13_subact_02',
                                      'Walking-1': 's_06_act_14_subact_01',
                                      'Walking-2': 's_06_act_14_subact_02',
                                      'WalkingDog-1': 's_06_act_15_subact_01',
                                      'WalkingDog-2': 's_06_act_15_subact_02',
                                      'WalkingTogether-1': 's_06_act_16_subact_01',
                                      'WalkingTogether-2': 's_06_act_16_subact_02'}),
                         'S7': defaultdict(None,
                                     {'Directions-1': 's_07_act_02_subact_01',
                                      'Directions-2': 's_07_act_02_subact_02',
                                      'Discussion-1': 's_07_act_03_subact_01',
                                      'Discussion-2': 's_07_act_03_subact_02',
                                      'Eating-1': 's_07_act_04_subact_01',
                                      'Eating-2': 's_07_act_04_subact_02',
                                      'Greeting-1': 's_07_act_05_subact_01',
                                      'Greeting-2': 's_07_act_05_subact_02',
                                      'Phoning-1': 's_07_act_06_subact_01',
                                      'Phoning-2': 's_07_act_06_subact_02',
                                      'Posing-1': 's_07_act_07_subact_01',
                                      'Posing-2': 's_07_act_07_subact_02',
                                      'Purchases-1': 's_07_act_08_subact_01',
                                      'Purchases-2': 's_07_act_08_subact_02',
                                      'Sitting-1': 's_07_act_09_subact_01',
                                      'Sitting-2': 's_07_act_09_subact_02',
                                      'SittingDown-1': 's_07_act_10_subact_01',
                                      'SittingDown-2': 's_07_act_10_subact_02',
                                      'Smoking-1': 's_07_act_11_subact_01',
                                      'Smoking-2': 's_07_act_11_subact_02',
                                      'TakingPhoto-1': 's_07_act_12_subact_01',
                                      'TakingPhoto-2': 's_07_act_12_subact_02',
                                      'Waiting-1': 's_07_act_13_subact_01',
                                      'Waiting-2': 's_07_act_13_subact_02',
                                      'Walking-1': 's_07_act_14_subact_01',
                                      'Walking-2': 's_07_act_14_subact_02',
                                      'WalkingDog-1': 's_07_act_15_subact_01',
                                      'WalkingDog-2': 's_07_act_15_subact_02',
                                      'WalkingTogether-1': 's_07_act_16_subact_01',
                                      'WalkingTogether-2': 's_07_act_16_subact_02'}),
                         'S8': defaultdict(None,
                                     {'Directions-1': 's_08_act_02_subact_01',
                                      'Directions-2': 's_08_act_02_subact_02',
                                      'Discussion-1': 's_08_act_03_subact_01',
                                      'Discussion-2': 's_08_act_03_subact_02',
                                      'Eating-1': 's_08_act_04_subact_01',
                                      'Eating-2': 's_08_act_04_subact_02',
                                      'Greeting-1': 's_08_act_05_subact_01',
                                      'Greeting-2': 's_08_act_05_subact_02',
                                      'Phoning-1': 's_08_act_06_subact_01',
                                      'Phoning-2': 's_08_act_06_subact_02',
                                      'Posing-1': 's_08_act_07_subact_01',
                                      'Posing-2': 's_08_act_07_subact_02',
                                      'Purchases-1': 's_08_act_08_subact_01',
                                      'Purchases-2': 's_08_act_08_subact_02',
                                      'Sitting-1': 's_08_act_09_subact_01',
                                      'Sitting-2': 's_08_act_09_subact_02',
                                      'SittingDown-1': 's_08_act_10_subact_01',
                                      'SittingDown-2': 's_08_act_10_subact_02',
                                      'Smoking-1': 's_08_act_11_subact_01',
                                      'Smoking-2': 's_08_act_11_subact_02',
                                      'TakingPhoto-1': 's_08_act_12_subact_01',
                                      'TakingPhoto-2': 's_08_act_12_subact_02',
                                      'Waiting-1': 's_08_act_13_subact_01',
                                      'Waiting-2': 's_08_act_13_subact_02',
                                      'Walking-1': 's_08_act_14_subact_01',
                                      'Walking-2': 's_08_act_14_subact_02',
                                      'WalkingDog-1': 's_08_act_15_subact_01',
                                      'WalkingDog-2': 's_08_act_15_subact_02',
                                      'WalkingTogether-1': 's_08_act_16_subact_01',
                                      'WalkingTogether-2': 's_08_act_16_subact_02'}),
                         'S9': defaultdict(None,
                                     {'Directions-1': 's_09_act_02_subact_01',
                                      'Directions-2': 's_09_act_02_subact_02',
                                      'Discussion-1': 's_09_act_03_subact_01',
                                      'Discussion-2': 's_09_act_03_subact_02',
                                      'Eating-1': 's_09_act_04_subact_01',
                                      'Eating-2': 's_09_act_04_subact_02',
                                      'Greeting-1': 's_09_act_05_subact_01',
                                      'Greeting-2': 's_09_act_05_subact_02',
                                      'Phoning-1': 's_09_act_06_subact_01',
                                      'Phoning-2': 's_09_act_06_subact_02',
                                      'Posing-1': 's_09_act_07_subact_01',
                                      'Posing-2': 's_09_act_07_subact_02',
                                      'Purchases-1': 's_09_act_08_subact_01',
                                      'Purchases-2': 's_09_act_08_subact_02',
                                      'Sitting-1': 's_09_act_09_subact_01',
                                      'Sitting-2': 's_09_act_09_subact_02',
                                      'SittingDown-1': 's_09_act_10_subact_01',
                                      'SittingDown-2': 's_09_act_10_subact_02',
                                      'Smoking-1': 's_09_act_11_subact_01',
                                      'Smoking-2': 's_09_act_11_subact_02',
                                      'TakingPhoto-1': 's_09_act_12_subact_01',
                                      'TakingPhoto-2': 's_09_act_12_subact_02',
                                      'Waiting-1': 's_09_act_13_subact_01',
                                      'Waiting-2': 's_09_act_13_subact_02',
                                      'Walking-1': 's_09_act_14_subact_01',
                                      'Walking-2': 's_09_act_14_subact_02',
                                      'WalkingDog-1': 's_09_act_15_subact_01',
                                      'WalkingDog-2': 's_09_act_15_subact_02',
                                      'WalkingTogether-1': 's_09_act_16_subact_01',
                                      'WalkingTogether-2': 's_09_act_16_subact_02'}),
                         'S11': defaultdict(None,
                                     {'Directions-1': 's_11_act_02_subact_01',
                                      'Directions-2': 's_11_act_02_subact_02',
                                      'Discussion-1': 's_11_act_03_subact_01',
                                      'Discussion-2': 's_11_act_03_subact_02',
                                      'Eating-1': 's_11_act_04_subact_01',
                                      'Eating-2': 's_11_act_04_subact_02',
                                      'Greeting-1': 's_11_act_05_subact_01',
                                      'Greeting-2': 's_11_act_05_subact_02',
                                      'Phoning-1': 's_11_act_06_subact_01',
                                      'Phoning-2': 's_11_act_06_subact_02',
                                      'Posing-1': 's_11_act_07_subact_01',
                                      'Posing-2': 's_11_act_07_subact_02',
                                      'Purchases-1': 's_11_act_08_subact_01',
                                      'Purchases-2': 's_11_act_08_subact_02',
                                      'Sitting-1': 's_11_act_09_subact_01',
                                      'Sitting-2': 's_11_act_09_subact_02',
                                      'SittingDown-1': 's_11_act_10_subact_01',
                                      'SittingDown-2': 's_11_act_10_subact_02',
                                      'Smoking-1': 's_11_act_11_subact_01',
                                      'Smoking-2': 's_11_act_11_subact_02',
                                      'TakingPhoto-1': 's_11_act_12_subact_01',
                                      'TakingPhoto-2': 's_11_act_12_subact_02',
                                      'Waiting-1': 's_11_act_13_subact_01',
                                      'Waiting-2': 's_11_act_13_subact_02',
                                      'Walking-1': 's_11_act_14_subact_01',
                                      'Walking-2': 's_11_act_14_subact_02',
                                      'WalkingDog-1': 's_11_act_15_subact_01',
                                      'WalkingDog-2': 's_11_act_15_subact_02',
                                      'WalkingTogether-1': 's_11_act_16_subact_01',
                                      'WalkingTogether-2': 's_11_act_16_subact_02'})})
        
        
    def __len__(self):
        return len(self.labels['table'])

    
    def convert_bbox_384x288(self, bbox, p_2D):
        #shot['bbox_by_camera_tlbr'][camera_idx]
        bbox = bbox.astype(float)
        center = [int((bbox[0]+bbox[2])/2), int((bbox[1]+bbox[3])/2)]
        area = abs((bbox[2]-bbox[0])*(bbox[3]-bbox[1]))
        height = np.sqrt(area * (4/3))
        width = (3/4) * height

        x_max = np.max(p_2D[:,0])
        x_min = np.min(p_2D[:,0])
        y_max = np.max(p_2D[:,1])
        y_min = np.min(p_2D[:,1])

        marginal_witdh = max(x_max-center[1], center[1]-x_min)*2
        marginal_height = max(y_max-center[0], center[0]-y_min)*2

        if marginal_witdh > width:
            width = marginal_witdh
            height *= marginal_witdh/width

        if marginal_height > height: # this will be not happened
            height = marginal_height
            width *= marginal_height/height


        bbox = [center[1]-int(width/2), center[0]-int(height/2), center[1]+int(width/2), center[0]+int(height/2)]

        return bbox

    def __getitem__(self, idx):
        sample = defaultdict(list) # return value
        shot = self.labels['table'][idx]

        subject = self.labels['subject_names'][shot['subject_idx']]
        action = self.labels['action_names'][shot['action_idx']]
        frame_idx = shot['frame_idx']

        for camera_idx, camera_name in enumerate(self.labels['camera_names']):
            if camera_idx in self.ignore_cameras:
                continue

            # load image
#             image_path = os.path.join(
#                 self.h36m_root, subject, action, 'imageSequence' + '-undistorted' * self.undistort_images,
#                 camera_name, 'img_%06d.jpg' % (frame_idx+1))
            
#             print('camera name is : {}\n'.format(camera_name))
#             print('camera idx is : {}\n'.format(camera_idx))
            seq_name = self.h36m_all_mapper[subject][action] + '_ca_%02d'%(camera_idx+1)
            
            image_path = os.path.join(
                self.h36m_root, seq_name, seq_name+'_%06d.jpg' % (frame_idx+1))
            
            assert os.path.isfile(image_path), '%s doesn\'t exist' % image_path
            image = cv2.imread(image_path)
            
            original_image = image
            
            original_image = cv2.resize(original_image, dsize=(1000,1000))
            sample['original_image'].append(original_image)

            # load camera
            shot_camera = self.labels['cameras'][shot['subject_idx'], camera_idx]
            retval_camera = Camera(shot_camera['R'], shot_camera['t'], shot_camera['K'], shot_camera['dist'], camera_name)
            original_camera = copy.deepcopy(retval_camera)
            projection_M = retval_camera.projection # 3,4
            
            # projected_2D
            D3_keypoints_homo = np.pad(shot['keypoints_extended'],((0,0), (0,1)), 'constant', constant_values=1.0) # 17, 4
            projected_2D = np.matmul(projection_M, D3_keypoints_homo.transpose()).transpose()
            projected_2D /= projected_2D[:,2:3]
            
            
#             #Adding 2D GT by sj
#             num_joints = 25
#             feature_h = 128
#             feature_w = 128
#             sample['keypoints_2d'].append(projected_2D)
#             h = feature_h
#             w = feature_w

#             heatmap_gt = np.zeros((num_joints,h,w))
#             sigma = 3
#             for joint in range(num_joints):
#                 # heatmap_gt = self.gaussian(int(projected_2D[joint, 0]/4), int(projected_2D[joint, 1]/4), 128, 128)
#                 channel = [math.exp(-((c - int(projected_2D[joint, 0]/4)) ** 2 + (r - int(projected_2D[joint, 1]/4)) ** 2) / (2 * sigma ** 2)) for r in range(h) for c in range(w)]
#                 channel = np.array(channel, dtype=np.float32)
#                 heatmap_gt[joint] = np.reshape(channel, newshape=(h,w))

#             sample['heatmaps_gt'].append(heatmap_gt)
            
            # load bounding box
            bbox = shot['bbox_by_camera_tlbr'][camera_idx][[1,0,3,2]] # TLBR to LTRB
            
            if self.option_384x288:
                # rewrite bbox
                bbox = self.convert_bbox_384x288(shot['bbox_by_camera_tlbr'][camera_idx], projected_2D) #LTRB
                
            bbox_height = bbox[2] - bbox[0]
            if bbox_height == 0:
                # convention: if the bbox is empty, then this view is missing
                continue

                
#             random_scale_bbox = 1.1 + 0.2*np.random.random_sample()
#             bbox = scale_bbox(bbox, random_scale_bbox)
            # scale the bounding box
            bbox = scale_bbox(bbox, self.scale_bbox)
            

            if self.crop:
                # crop image
                image = crop_image(image, bbox)
                retval_camera.update_after_crop(bbox)

            if self.image_shape is not None:
                # resize
                image_shape_before_resize = image.shape[:2]
                image = resize_image(image, self.image_shape)
                retval_camera.update_after_resize(image_shape_before_resize, self.image_shape)

                sample['image_shapes_before_resize'].append(image_shape_before_resize)

            if self.norm_image:
                image = normalize_image(image)

            sample['images'].append(image)
            sample['detections'].append(bbox + (1.0,)) # TODO add real confidences
            sample['cameras'].append(retval_camera)
            sample['proj_matrices'].append(retval_camera.projection)
            sample['original_cameras'].append(original_camera)
            
            sample['image_path'].append(image_path)

        # 3D keypoints
        # add dummy confidences
        sample['keypoints_3d'] = np.pad(
            shot['keypoints'][:self.num_keypoints],
            ((0,0), (0,1)), 'constant', constant_values=1.0)
        
        sample['keypoints_3d_extended'] = np.pad(
            shot['keypoints_extended'][:self.num_extended_keypoints],
            ((0,0), (0,1)), 'constant', constant_values=1.0)

        # build cuboid
        # base_point = sample['keypoints_3d'][6, :3]
        # sides = np.array([self.cuboid_side, self.cuboid_side, self.cuboid_side])
        # position = base_point - sides / 2
        # sample['cuboids'] = volumetric.Cuboid3D(position, sides)

        # save sample's index
        sample['indexes'] = idx
        sample['subject'] = subject
        sample['action'] = action
        #sample['subject'] = self.labels['subject_names']
        #sample['action'] = self.labels['action_names']

        if self.keypoints_3d_pred is not None:
            sample['pred_keypoints_3d'] = self.keypoints_3d_pred[idx]

        sample.default_factory = None
        
        return sample

    def evaluate_using_per_pose_error(self, per_pose_error, split_by_subject):
        def evaluate_by_actions(self, per_pose_error, mask=None):
            if mask is None:
                mask = np.ones_like(per_pose_error, dtype=bool)

            action_scores = {
                'Average': {'total_loss': per_pose_error[mask].sum(), 'frame_count': np.count_nonzero(mask)}
            }

            for action_idx in range(len(self.labels['action_names'])):
                action_mask = (self.labels['table']['action_idx'] == action_idx) & mask
                action_per_pose_error = per_pose_error[action_mask]
                action_scores[self.labels['action_names'][action_idx]] = {
                    'total_loss': action_per_pose_error.sum(), 'frame_count': len(action_per_pose_error)
                }

            action_names_without_trials = \
                [name[:-2] for name in self.labels['action_names'] if name.endswith('-1')]

            for action_name_without_trial in action_names_without_trials:
                combined_score = {'total_loss': 0.0, 'frame_count': 0}

                for trial in 1, 2:
                    action_name = '%s-%d' % (action_name_without_trial, trial)
                    combined_score['total_loss' ] += action_scores[action_name]['total_loss']
                    combined_score['frame_count'] += action_scores[action_name]['frame_count']
                    del action_scores[action_name]

                action_scores[action_name_without_trial] = combined_score

            for k, v in action_scores.items():
                action_scores[k] = float('nan') if v['frame_count'] == 0 else (v['total_loss'] / v['frame_count'])

            return action_scores

        subject_scores = {
            'Average': evaluate_by_actions(self, per_pose_error)
        }

        for subject_idx in range(len(self.labels['subject_names'])):
            subject_mask = self.labels['table']['subject_idx'] == subject_idx
            subject_scores[self.labels['subject_names'][subject_idx]] = \
                evaluate_by_actions(self, per_pose_error, subject_mask)

        return subject_scores

    def evaluate_extended(self, keypoints_3d_predicted, split_by_subject=False, transfer_cmu_to_human36m=False, transfer_human36m_to_human36m=False):
#         keypoints_gt = self.labels['table']['keypoints'][:, :self.num_keypoints]
        keypoints_gt = self.labels['table']['keypoints_extended'][:, :self.num_extended_keypoints]
        if keypoints_3d_predicted.shape != keypoints_gt.shape:
            raise ValueError(
                '`keypoints_3d_predicted` shape should be %s, got %s' % \
                (keypoints_gt.shape, keypoints_3d_predicted.shape))

        if transfer_cmu_to_human36m or transfer_human36m_to_human36m:
            human36m_joints = [10, 11, 15, 14, 1, 4]
            if transfer_human36m_to_human36m:
                cmu_joints = [10, 11, 15, 14, 1, 4]
            else:
                cmu_joints = [10, 8, 9, 7, 14, 13]

            keypoints_gt = keypoints_gt[:, human36m_joints]
            keypoints_3d_predicted = keypoints_3d_predicted[:, cmu_joints]

        # mean error per 16/17 joints in mm, for each pose
        per_pose_error = np.sqrt(((keypoints_gt - keypoints_3d_predicted) ** 2).sum(2)).mean(1)

        # relative mean error per 16/17 joints in mm, for each pose
        if not (transfer_cmu_to_human36m or transfer_human36m_to_human36m):
            root_index = 6 if self.kind == "mpii" else 6
        else:
            root_index = 0

        keypoints_gt_relative = keypoints_gt - keypoints_gt[:, root_index:root_index + 1, :]
        keypoints_3d_predicted_relative = keypoints_3d_predicted - keypoints_3d_predicted[:, root_index:root_index + 1, :]

        per_pose_error_relative = np.sqrt(((keypoints_gt_relative - keypoints_3d_predicted_relative) ** 2).sum(2)).mean(1)

        result = {
            'per_pose_error': self.evaluate_using_per_pose_error(per_pose_error, split_by_subject),
            'per_pose_error_relative': self.evaluate_using_per_pose_error(per_pose_error_relative, split_by_subject)
        }

        return result['per_pose_error_relative']['Average']['Average'], result
    
    def evaluate(self, keypoints_3d_predicted, split_by_subject=False, transfer_cmu_to_human36m=False, transfer_human36m_to_human36m=False):
        keypoints_gt = self.labels['table']['keypoints'][:, :self.num_keypoints]
#         keypoints_gt = self.labels['table']['keypoints_extended'][:, :self.num_extended_keypoints]
        if keypoints_3d_predicted.shape != keypoints_gt.shape:
            raise ValueError(
                '`keypoints_3d_predicted` shape should be %s, got %s' % \
                (keypoints_gt.shape, keypoints_3d_predicted.shape))

        if transfer_cmu_to_human36m or transfer_human36m_to_human36m:
            human36m_joints = [10, 11, 15, 14, 1, 4]
            if transfer_human36m_to_human36m:
                cmu_joints = [10, 11, 15, 14, 1, 4]
            else:
                cmu_joints = [10, 8, 9, 7, 14, 13]

            keypoints_gt = keypoints_gt[:, human36m_joints]
            keypoints_3d_predicted = keypoints_3d_predicted[:, cmu_joints]

        # mean error per 16/17 joints in mm, for each pose
        per_pose_error = np.sqrt(((keypoints_gt - keypoints_3d_predicted) ** 2).sum(2)).mean(1)

        # relative mean error per 16/17 joints in mm, for each pose
        if not (transfer_cmu_to_human36m or transfer_human36m_to_human36m):
            root_index = 6 if self.kind == "mpii" else 6
        else:
            root_index = 0

        keypoints_gt_relative = keypoints_gt - keypoints_gt[:, root_index:root_index + 1, :]
        keypoints_3d_predicted_relative = keypoints_3d_predicted - keypoints_3d_predicted[:, root_index:root_index + 1, :]

        per_pose_error_relative = np.sqrt(((keypoints_gt_relative - keypoints_3d_predicted_relative) ** 2).sum(2)).mean(1)

        result = {
            'per_pose_error': self.evaluate_using_per_pose_error(per_pose_error, split_by_subject),
            'per_pose_error_relative': self.evaluate_using_per_pose_error(per_pose_error_relative, split_by_subject)
        }

        return result['per_pose_error_relative']['Average']['Average'], result
